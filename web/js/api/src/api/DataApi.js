/**
 * api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MarketOverviewItem from '../model/MarketOverviewItem';
import NewsItem from '../model/NewsItem';

/**
* Data service.
* @module api/DataApi
* @version 0.1.0
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMarketOverview operation.
     * @callback module:api/DataApi~getMarketOverviewCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MarketOverviewItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DataApi~getMarketOverviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MarketOverviewItem>}
     */
    getMarketOverview(callback) {
      const debugPrefix = '[YAUSMA-DATAAPI-DEBUG]';
      
      console.log(`${debugPrefix} getMarketOverview called`);
      
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      console.log(`${debugPrefix} getMarketOverview queryParams:`, queryParams);
      console.log(`${debugPrefix} getMarketOverview returnType:`, [MarketOverviewItem]);

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MarketOverviewItem];
      
      // Wrap the callback to add logging
      const wrappedCallback = (error, data, response) => {
        console.log(`${debugPrefix} getMarketOverview callback invoked`);
        console.log(`${debugPrefix} getMarketOverview callback error:`, error);
        console.log(`${debugPrefix} getMarketOverview callback data:`, data);
        console.log(`${debugPrefix} getMarketOverview callback data type:`, typeof data);
        if (Array.isArray(data)) {
          console.log(`${debugPrefix} getMarketOverview callback data length:`, data.length);
        }
        console.log(`${debugPrefix} getMarketOverview callback response status:`, response?.status);
        
        // Call the original callback
        if (callback) {
          callback(error, data, response);
        }
      };
      
      console.log(`${debugPrefix} getMarketOverview calling apiClient.callApi...`);
      return this.apiClient.callApi(
        '/api/data/market-overview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, wrappedCallback
      );
    }

    /**
     * Callback function to receive the result of the getNews operation.
     * @callback module:api/DataApi~getNewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NewsItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [ticker] 
     * @param {module:api/DataApi~getNewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NewsItem>}
     */
    getNews(opts, callback) {
      opts = opts || {};
      const debugPrefix = '[YAUSMA-DATAAPI-DEBUG]';
      
      console.log(`${debugPrefix} getNews called with opts:`, opts);
      console.log(`${debugPrefix} getNews ticker parameter:`, opts['ticker']);
      
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'ticker': opts['ticker']
      };
      let headerParams = {
      };
      let formParams = {
      };

      console.log(`${debugPrefix} getNews queryParams:`, queryParams);
      console.log(`${debugPrefix} getNews returnType:`, [NewsItem]);

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [NewsItem];
      
      // Wrap the callback to add logging
      const wrappedCallback = (error, data, response) => {
        console.log(`${debugPrefix} getNews callback invoked`);
        console.log(`${debugPrefix} getNews callback error:`, error);
        console.log(`${debugPrefix} getNews callback data:`, data);
        console.log(`${debugPrefix} getNews callback data type:`, typeof data);
        if (Array.isArray(data)) {
          console.log(`${debugPrefix} getNews callback data length:`, data.length);
          if (data.length > 0) {
            console.log(`${debugPrefix} getNews callback first item:`, data[0]);
            console.log(`${debugPrefix} getNews callback first item type:`, typeof data[0]);
            console.log(`${debugPrefix} getNews callback first item constructor:`, data[0]?.constructor?.name);
          }
        }
        console.log(`${debugPrefix} getNews callback response status:`, response?.status);
        
        // Call the original callback
        if (callback) {
          callback(error, data, response);
        }
      };
      
      console.log(`${debugPrefix} getNews calling apiClient.callApi...`);
      return this.apiClient.callApi(
        '/api/data/news', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, wrappedCallback
      );
    }


}
